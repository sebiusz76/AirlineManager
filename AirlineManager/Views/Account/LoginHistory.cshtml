@model IEnumerable<AirlineManager.Models.Domain.UserLoginHistory>

@{
	ViewData["Title"] = "Login History";
	var currentPage = ViewBag.CurrentPage as int? ?? 1;
	var pageSize = ViewBag.PageSize as int? ?? 20;
	var totalPages = ViewBag.TotalPages as int? ?? 1;
	var totalCount = ViewBag.TotalCount as int? ?? 0;
}

<h1><i class="bi bi-clock-history"></i> Login History</h1>
<p class="text-muted">View your recent login activity and device information.</p>

<div class="card">
	<div class="card-body">
		@if (Model.Any())
		{
			<div class="table-responsive">
				<table class="table table-hover">
					<thead>
						<tr>
							<th>Date & Time</th>
							<th>Status</th>
							<th>IP Address</th>
							<th>Browser</th>
							<th>Operating System</th>
							<th>Device</th>
							<th>2FA</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var login in Model)
						{
							<tr>
								<td>
									<span data-bs-toggle="tooltip" title="@login.LoginTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")">
										@login.LoginTime.ToLocalTime().ToString("MMM dd, yyyy HH:mm")
									</span>
								</td>
								<td>
									@if (login.IsSuccessful)
									{
										<span class="badge bg-success"><i class="bi bi-check-circle"></i> Success</span>
									}
									else
									{
										<span class="badge bg-danger"><i class="bi bi-x-circle"></i> Failed</span>
										@if (!string.IsNullOrEmpty(login.FailureReason))
										{
											<br />
											<small class="text-muted">@login.FailureReason</small>
										}
									}
								</td>
								<td>
									@if (!string.IsNullOrEmpty(login.IpAddress))
									{
										<code>@login.IpAddress</code>
									}
									else
									{
										<span class="text-muted">-</span>
									}
								</td>
								<td>
									@if (!string.IsNullOrEmpty(login.Browser))
									{
										@login.Browser
									}
									else
									{
										<span class="text-muted">Unknown</span>
									}
								</td>
								<td>
									@if (!string.IsNullOrEmpty(login.OperatingSystem))
									{
										@login.OperatingSystem
									}
									else
									{
										<span class="text-muted">Unknown</span>
									}
								</td>
								<td>
									@if (!string.IsNullOrEmpty(login.Device))
									{
										@login.Device
									}
									else
									{
										<span class="text-muted">-</span>
									}
								</td>
								<td>
									@if (login.RequiredTwoFactor)
									{
										<i class="bi bi-shield-check text-success" title="Two-factor authentication used"></i>
									}
									else
									{
										<i class="bi bi-shield-x text-muted" title="No two-factor"></i>
									}
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>

			@if (totalPages > 1)
			{
				<nav aria-label="Login history pagination">
					<ul class="pagination">
						<li class="page-item @(currentPage == 1 ? "disabled" : "")">
							<a class="page-link" href="?page=@(currentPage - 1)&pageSize=@pageSize">Previous</a>
						</li>
						@for (int p = 1; p <= totalPages; p++)
						{
							<li class="page-item @(p == currentPage ? "active" : "")">
								<a class="page-link" href="?page=@p&pageSize=@pageSize">@p</a>
							</li>
						}
						<li class="page-item @(currentPage == totalPages ? "disabled" : "")">
							<a class="page-link" href="?page=@(currentPage + 1)&pageSize=@pageSize">Next</a>
						</li>
					</ul>
				</nav>
			}

			<div class="mt-3">
				<p class="text-muted">
					<small>
						Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalCount) of @totalCount login attempts
					</small>
				</p>
			</div>
		}
		else
		{
			<div class="alert alert-info">
				<i class="bi bi-info-circle"></i> No login history available.
			</div>
		}
	</div>
</div>

<div class="mt-3 text-end">
	<a asp-controller="Account" asp-action="Profile" class="btn btn-outline-secondary">
		<i class="bi bi-arrow-left"></i> Back to Profile
	</a>
</div>

@section Scripts {
	<script>
		  // Enable Bootstrap tooltips
		var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
				var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
			 return new bootstrap.Tooltip(tooltipTriggerEl)
				})
	</script>
}
