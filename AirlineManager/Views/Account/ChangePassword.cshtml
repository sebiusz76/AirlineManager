@model AirlineManager.Models.ViewModel.ChangePasswordViewModel

@{
	ViewData["Title"] = "Change Password";
	var mustChangePassword = ViewBag.MustChangePassword as bool? ?? false;
	var isExpired = ViewBag.IsPasswordExpired as bool? ?? false;
	var daysUntilExpiration = ViewBag.DaysUntilPasswordExpiration as int?;
}

<div class="auth-container">
	<div class="container py-5">
		<div class="row justify-content-center">
			<div class="col-lg-6 col-md-8">
				<!-- Change Password Card -->
				<div class="auth-card card border-0 shadow-lg">
					<!-- Header with gradient -->
					<div class="auth-header text-white text-center py-4" style="background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%); border-radius: 15px 15px 0 0;">
						<div class="mb-3">
							<i class="bi bi-key-fill" style="font-size: 3.5rem;"></i>
						</div>
						<h2 class="fw-bold mb-2">Change Password</h2>
						<p class="mb-0 opacity-75">Create a new secure password</p>
					</div>

					<div class="card-body p-4 p-md-5">
						@if (mustChangePassword)
						{
							<div class="alert alert-warning rounded-3 mb-4">
								<i class="bi bi-exclamation-triangle me-2"></i>
								<strong>Password Change Required</strong>
								<p class="mb-0 mt-2 small">
									An administrator has flagged your account for a password change.
									Please set a new password to continue.
								</p>
							</div>
						}
						else if (isExpired)
						{
							<div class="alert alert-danger rounded-3 mb-4">
								<i class="bi bi-shield-exclamation me-2"></i>
								<strong>Password Expired</strong>
								<p class="mb-0 mt-2 small">
									For security reasons, you must change your password to continue using your account.
								</p>
							</div>
						}
						else if (daysUntilExpiration.HasValue && daysUntilExpiration.Value <= 7 && daysUntilExpiration.Value > 0)
						{
							<div class="alert alert-info rounded-3 mb-4">
								<i class="bi bi-info-circle me-2"></i>
								<strong>Password Expiring Soon</strong>
								<p class="mb-0 mt-2 small">
									Your password will expire in <strong>@daysUntilExpiration.Value day(s)</strong>.
									Consider changing it now to avoid interruption.
								</p>
							</div>
						}

						<form asp-action="ChangePassword" method="post" class="edit-form">
							@Html.AntiForgeryToken()
							<div asp-validation-summary="ModelOnly" class="alert alert-danger rounded-3 mb-4"></div>

							<!-- New Password Input -->
							<div class="mb-4">
								<label asp-for="NewPassword" class="form-label fw-bold">
									<i class="bi bi-lock me-2"></i>New Password
								</label>
								<div class="input-group">
									<span class="input-group-text"><i class="bi bi-lock-fill"></i></span>
									<input asp-for="NewPassword" class="form-control" type="password" placeholder="Enter new password" />
									<button class="btn btn-outline-secondary" type="button" onclick="togglePassword('NewPassword')">
										<i class="bi bi-eye" id="NewPassword-icon"></i>
									</button>
								</div>
								<span asp-validation-for="NewPassword" class="text-danger small"></span>
							</div>

							<!-- Confirm Password Input -->
							<div class="mb-4">
								<label asp-for="ConfirmPassword" class="form-label fw-bold">
									<i class="bi bi-shield-check me-2"></i>Confirm New Password
								</label>
								<div class="input-group">
									<span class="input-group-text"><i class="bi bi-shield-fill-check"></i></span>
									<input asp-for="ConfirmPassword" class="form-control" type="password" placeholder="Confirm new password" />
									<button class="btn btn-outline-secondary" type="button" onclick="togglePassword('ConfirmPassword')">
										<i class="bi bi-eye" id="ConfirmPassword-icon"></i>
									</button>
								</div>
								<span asp-validation-for="ConfirmPassword" class="text-danger small"></span>
							</div>

							<!-- Password Requirements -->
							@if (ViewBag.PasswordRequirements != null && ((List<string>)ViewBag.PasswordRequirements).Any())
							{
								<div class="alert alert-info rounded-3 mb-4" style="background-color: #e7f3ff; border: 1px solid #0c5ea8;">
									<div class="d-flex align-items-start">
										<i class="bi bi-info-circle-fill me-2 mt-1" style="color: #0c5ea8;"></i>
										<div>
											<strong style="color: #0c5ea8;">Password Requirements:</strong>
											<ul class="mb-0 mt-2 small" style="color: #0c5ea8;">
												@foreach (var requirement in (List<string>)ViewBag.PasswordRequirements)
												{
													<li>@requirement</li>
												}
											</ul>
										</div>
									</div>
								</div>
							}

							<!-- Password Strength Indicator -->
							<div class="mb-4">
								<label class="form-label fw-bold">
									<i class="bi bi-shield-shaded me-2"></i>Password Strength
								</label>
								<div class="progress" style="height: 8px;">
									<div id="passwordStrength" class="progress-bar" role="progressbar" style="width: 0%"></div>
								</div>
								<small id="strengthText" class="text-muted"></small>
							</div>

							<!-- Change Password Button -->
							<div class="d-grid gap-2 mb-4">
								<button type="submit" class="btn btn-lg text-white" style="background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);">
									<i class="bi bi-check-circle me-2"></i>Change Password
								</button>
							</div>

							<!-- Back to Profile -->
							<div class="text-center">
								<a asp-action="Profile" class="text-decoration-none">
									<i class="bi bi-arrow-left me-1"></i>Back to Profile
								</a>
							</div>
						</form>
					</div>
				</div>

				<!-- Security Tips -->
				<div class="card border-0 shadow-sm mt-4">
					<div class="card-body p-4">
						<h6 class="card-title mb-3">
							<i class="bi bi-lightbulb text-warning me-2"></i>Password Security Tips
						</h6>
						<ul class="mb-0 small text-muted">
							<li>Use a unique password that you don't use anywhere else</li>
							<li>Combine uppercase, lowercase, numbers, and symbols</li>
							<li>Avoid common words, names, or dates</li>
							<li>Consider using a password manager</li>
							<li>Change your password regularly</li>
						</ul>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<style>
	.auth-container {
		min-height: 100vh;
		background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
		display: flex;
		align-items: center;
		margin: -1rem -15px -60px;
		padding-bottom: 60px;
	}

	.auth-card {
		border-radius: 15px;
		overflow: hidden;
		animation: fadeInUp 0.6s ease-out;
	}

	@@keyframes fadeInUp {
		from {
			opacity: 0;
			transform: translateY(30px);
		}

		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	.input-group-text {
		background-color: #f8f9fa;
		border-right: none;
	}

	.input-group .form-control {
		border-left: none;
		border-right: none;
	}

	.input-group .btn-outline-secondary {
		border-left: none;
	}

	.input-group:focus-within .input-group-text {
		border-color: #80bdff;
		background-color: #e7f3ff;
	}

	.input-group:focus-within .form-control {
		border-color: #80bdff;
	}

	.input-group:focus-within .btn-outline-secondary {
		border-color: #80bdff;
	}

	.form-control:focus {
		box-shadow: none;
	}

	.btn:hover {
		transform: translateY(-2px);
		box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
		transition: all 0.3s ease;
	}

	.alert {
		border-radius: 10px;
	}

	.progress {
		border-radius: 10px;
		background-color: #e9ecef;
	}

	.progress-bar {
		transition: width 0.3s ease, background-color 0.3s ease;
		border-radius: 10px;
	}

	/* Password strength colors */
	.strength-weak {
		background-color: #dc3545;
	}

	.strength-fair {
		background-color: #ffc107;
	}

	.strength-good {
		background-color: #17a2b8;
	}

	.strength-strong {
		background-color: #28a745;
	}
</style>

@section Scripts {
	<partial name="_ValidationScriptsPartial" />
	<script>
		// Toggle password visibility
		function togglePassword(fieldName) {
			const input = document.querySelector(`input[name="${fieldName}"]`);
			const icon = document.getElementById(`${fieldName}-icon`);

			if (input.type === 'password') {
				input.type = 'text';
				icon.classList.remove('bi-eye');
				icon.classList.add('bi-eye-slash');
			} else {
				input.type = 'password';
				icon.classList.remove('bi-eye-slash');
				icon.classList.add('bi-eye');
			}
		}

		// Password strength checker
		document.querySelector('input[name="NewPassword"]')?.addEventListener('input', function(e) {
			const password = e.target.value;
			const strengthBar = document.getElementById('passwordStrength');
			const strengthText = document.getElementById('strengthText');

			let strength = 0;
			let strengthLabel = '';

			if (password.length === 0) {
				strengthBar.style.width = '0%';
				strengthBar.className = 'progress-bar';
				strengthText.textContent = '';
				return;
			}

			// Check length
			if (password.length >= 8) strength += 25;
			if (password.length >= 12) strength += 10;

			// Check for lowercase
			if (/[a-z]/.test(password)) strength += 15;

			// Check for uppercase
			if (/[A-Z]/.test(password)) strength += 15;

			// Check for numbers
			if (/\d/.test(password)) strength += 15;

			// Check for special characters
			if (/[^a-zA-Z0-9]/.test(password)) strength += 20;

			// Determine strength label and color
			strengthBar.style.width = strength + '%';

			if (strength < 40) {
				strengthBar.className = 'progress-bar strength-weak';
				strengthLabel = 'Weak';
			} else if (strength < 60) {
				strengthBar.className = 'progress-bar strength-fair';
				strengthLabel = 'Fair';
			} else if (strength < 80) {
				strengthBar.className = 'progress-bar strength-good';
				strengthLabel = 'Good';
			} else {
				strengthBar.className = 'progress-bar strength-strong';
				strengthLabel = 'Strong';
			}

			strengthText.textContent = `Password strength: ${strengthLabel}`;
			strengthText.className = strengthBar.className.replace('progress-bar', 'small');
		});

		// Match password confirmation
		document.querySelector('input[name="ConfirmPassword"]')?.addEventListener('input', function(e) {
			const password = document.querySelector('input[name="NewPassword"]').value;
			const confirm = e.target.value;

			if (confirm.length > 0) {
				if (password === confirm) {
					e.target.classList.remove('is-invalid');
					e.target.classList.add('is-valid');
				} else {
					e.target.classList.remove('is-valid');
					e.target.classList.add('is-invalid');
				}
			} else {
				e.target.classList.remove('is-valid', 'is-invalid');
			}
		});
	</script>
}
