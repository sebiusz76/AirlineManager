@model AirlineManager.Models.ViewModel.ProfileCompositeViewModel
@inject Microsoft.AspNetCore.Identity.UserManager<AirlineManager.Models.Domain.ApplicationUser> UserManager

@{
	ViewData["Title"] = "Profile";
	var daysUntilExpiration = ViewBag.DaysUntilPasswordExpiration as int?;
	var isPasswordExpired = ViewBag.IsPasswordExpired as bool? ?? false;
}

@section Styles {
	<link rel="stylesheet" href="~/css/views/Account/Profile.css" asp-append-version="true" />
}

<div class="container py-4">
	<!-- Profile Header with Avatar -->
	<div class="row">
		<div class="col-12">
			<!-- Profile Header Card -->
			<div class="card shadow-lg border-0 mb-4 profile-header-gradient">
				<div class="card-body p-4">
					<div class="row align-items-center">
						<div class="col-md-2 text-center mb-3 mb-md-0">
							<!-- Avatar Section -->
							<div class="position-relative d-inline-block">
								@{
									var user = await UserManager.GetUserAsync(User);
									var initials = user != null ? $"{user.FirstName[0]}{user.LastName[0]}" : "U";
									var avatarUrl = user?.AvatarUrl;
								}
								<div class="avatar-large" id="profileAvatar">
									@if (!string.IsNullOrEmpty(avatarUrl))
									{
										<img src="@avatarUrl" alt="Avatar" class="avatar-img" />
									}
									else
									{
										<div class="avatar-initials">@initials</div>
									}
								</div>
								<button type="button" class="btn btn-light btn-sm avatar-edit-btn" data-bs-toggle="modal" data-bs-target="#avatarModal">
									<i class="bi bi-camera-fill"></i>
								</button>
							</div>
						</div>
						<div class="col-md-7">
							<h2 class="text-white mb-2">@user?.FirstName @user?.LastName</h2>
							<p class="text-white-50 mb-1">
								<i class="bi bi-envelope me-2"></i>@user?.Email
							</p>
							<p class="text-white-50 mb-0">
								<i class="bi bi-shield-check me-2"></i>
								@{
									var roles = await UserManager.GetRolesAsync(user);
								}
								@string.Join(", ", roles)
							</p>
						</div>
						<div class="col-md-3 text-md-end">
							<div class="text-white-50 small">
								<i class="bi bi-calendar3 me-2"></i>Member since
							</div>
							@{
								// Use PasswordChangedAt as member since date
								DateTime memberSince = user?.PasswordChangedAt ?? DateTime.UtcNow;
							}
							<div class="text-white fw-bold">@memberSince.ToString("MMM dd, yyyy")</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	@if (isPasswordExpired)
	{
		<div class="alert alert-danger alert-dismissible fade show">
			<i class="bi bi-shield-exclamation"></i> <strong>Your password has expired!</strong>
			Please <a asp-action="ChangePassword" class="alert-link">change your password</a> as soon as possible.
			<button type="button" class="btn-close" data-bs-dismiss="alert"></button>
		</div>
	}
	else if (daysUntilExpiration.HasValue && daysUntilExpiration.Value <= 14 && daysUntilExpiration.Value > 0)
	{
		<div class="alert alert-warning alert-dismissible fade show">
			<i class="bi bi-exclamation-triangle"></i> <strong>Password expiring soon!</strong>
			Your password will expire in <strong>@daysUntilExpiration.Value day(s)</strong>.
			<a asp-action="ChangePassword" class="alert-link">Change it now</a> to avoid interruption.
			<button type="button" class="btn-close" data-bs-dismiss="alert"></button>
		</div>
	}

	<!-- Hidden antiforgery token for AJAX requests -->
	<form id="antiforgeryForm" class="antiforgery-form-hidden">@Html.AntiForgeryToken()</form>

	<!-- Avatar Upload Modal -->
	<div class="modal fade" id="avatarModal" tabindex="-1" aria-labelledby="avatarModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header bg-primary text-white">
					<h5 class="modal-title" id="avatarModalLabel">
						<i class="bi bi-camera"></i> Change Avatar
					</h5>
					<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<p class="text-muted">Choose an option to update your profile picture:</p>
					<div class="d-grid gap-2">
						<button type="button" class="btn btn-outline-primary" onclick="alert('Upload image functionality - to be implemented')">
							<i class="bi bi-upload me-2"></i>Upload Image
						</button>
						<button type="button" class="btn btn-outline-secondary" onclick="alert('Choose from gallery - to be implemented')">
							<i class="bi bi-images me-2"></i>Choose from Gallery
						</button>
						@if (!string.IsNullOrEmpty(avatarUrl))
						{
							<button type="button" class="btn btn-outline-danger" onclick="removeAvatar()">
								<i class="bi bi-trash me-2"></i>Remove Avatar
							</button>
						}
					</div>
					<div class="mt-3">
						<small class="text-muted">
							<i class="bi bi-info-circle"></i>
							Supported formats: JPG, PNG, GIF (max 2MB)
						</small>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Recovery Codes Modal -->
	<div class="modal fade" id="recoveryCodesModal" tabindex="-1" aria-labelledby="recoveryCodesModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="recoveryCodesModalLabel">Recovery Codes</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<div class="alert alert-warning">
						<strong>Important!</strong> Save these recovery codes in a safe place. You can use them to sign in if you lose access to your authenticator app.
					</div>
					<pre id="modalRecoveryCodes" class="p-3 bg-light border rounded recovery-codes-display"></pre>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" id="btnCopyRecoveryCodes">
						<i class="bi bi-clipboard"></i> Copy to clipboard
					</button>
					<button type="button" class="btn btn-primary" id="btnDownloadRecoveryCodes">
						<i class="bi bi-download"></i> Download as file
					</button>
					<button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
				</div>
			</div>
		</div>
	</div>

	<!-- Two-Factor Authentication Modal -->
	<div class="modal fade" id="twoFactorModal" tabindex="-1" aria-labelledby="twoFactorModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header bg-primary text-white">
					<h5 class="modal-title" id="twoFactorModalLabel">
						<i class="bi bi-shield-lock"></i> Two-Factor Authentication
					</h5>
					<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<p class="text-muted">To enhance account security, you can enable two-factor authentication (2FA). This requires a verification code from your authenticator app in addition to your password when signing in.</p>
					<div class="mb-3">
						<label for="tfCode" class="form-label fw-bold">Verification Code</label>
						<input id="tfCode" class="form-control" autocomplete="one-time-code" />
					</div>
					<div class="tfa-setup-area" style="display:none;">
						<div id="tfQr" class="tfa-qr-container"></div>
						<div class="mt-2">
							<strong>Authentication key</strong>
						</div>
						<pre id="tfKey" class="p-2 bg-light" style="max-width:320px; white-space:pre-wrap;"></pre>
					</div>
				</div>
				<div class="modal-footer">
					<button id="tfEnable" class="btn btn-success">
						<i class="bi bi-check-circle me-2"></i>Enable
					</button>
					<button id="tfDisable" class="btn btn-danger">
						<i class="bi bi-x-circle me-2"></i>Disable 2FA
					</button>
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				</div>
			</div>
		</div>
	</div>

	<ul class="nav nav-tabs nav-tabs-custom" id="profileTabs" role="tablist">
		<li class="nav-item" role="presentation">
			<button class="nav-link active" id="info-tab" data-bs-toggle="tab" data-bs-target="#info" type="button" role="tab">
				<i class="bi bi-person-circle me-2"></i>Info
			</button>
		</li>
		<li class="nav-item" role="presentation">
			<button class="nav-link" id="email-tab" data-bs-toggle="tab" data-bs-target="#email" type="button" role="tab">
				<i class="bi bi-envelope me-2"></i>Email
			</button>
		</li>
		<li class="nav-item" role="presentation">
			<button class="nav-link" id="password-tab" data-bs-toggle="tab" data-bs-target="#password" type="button" role="tab">
				<i class="bi bi-lock me-2"></i>Password
			</button>
		</li>
		<li class="nav-item" role="presentation">
			<button class="nav-link" id="twofactor-tab" data-bs-toggle="tab" data-bs-target="#twofactor" type="button" role="tab">
				<i class="bi bi-shield-lock me-2"></i>Two-Factor
			</button>
		</li>
		<li class="nav-item" role="presentation">
			<button class="nav-link" id="export-tab" data-bs-toggle="tab" data-bs-target="#export" type="button" role="tab">
				<i class="bi bi-download me-2"></i>Export / Delete
			</button>
		</li>
	</ul>

	<div class="tab-content mt-4" id="profileTabsContent">
		<div class="tab-pane fade show active" id="info" role="tabpanel">
			<div class="card shadow-sm border-0">
				<div class="card-body p-4">
					<h5 class="card-title mb-4">
						<i class="bi bi-person-badge text-primary me-2"></i>Personal Information
					</h5>
					<form asp-action="ProfileInfo" method="post" class="edit-form">
						@Html.AntiForgeryToken()
						<div class="row">
							<div class="col-md-6 mb-3">
								<label asp-for="Info.FirstName" class="form-label fw-bold"></label>
								<div class="input-group">
									<span class="input-group-text"><i class="bi bi-person"></i></span>
									<input asp-for="Info.FirstName" class="form-control" />
								</div>
								<span asp-validation-for="Info.FirstName" class="text-danger small"></span>
							</div>
							<div class="col-md-6 mb-3">
								<label asp-for="Info.LastName" class="form-label fw-bold"></label>
								<div class="input-group">
									<span class="input-group-text"><i class="bi bi-person"></i></span>
									<input asp-for="Info.LastName" class="form-control" />
								</div>
								<span asp-validation-for="Info.LastName" class="text-danger small"></span>
							</div>
						</div>
						<button type="submit" class="btn btn-primary">
							<i class="bi bi-check-circle me-2"></i>Save Changes
						</button>
					</form>
				</div>
			</div>
		</div>

		<div class="tab-pane fade" id="email" role="tabpanel">
			<div class="card shadow-sm border-0">
				<div class="card-body p-4">
					<h5 class="card-title mb-4">
						<i class="bi bi-envelope-at text-primary me-2"></i>Email Address
					</h5>
					<form asp-action="ProfileEmail" method="post" class="edit-form">
						@Html.AntiForgeryToken()
						<div class="mb-3">
							<label asp-for="Email.Email" class="form-label fw-bold"></label>
							<div class="input-group">
								<span class="input-group-text"><i class="bi bi-envelope"></i></span>
								<input asp-for="Email.Email" class="form-control" />
							</div>
							<span asp-validation-for="Email.Email" class="text-danger small"></span>
						</div>
						<div class="mb-3">
							<label asp-for="Email.CurrentPassword" class="form-label fw-bold"></label>
							<div class="input-group">
								<span class="input-group-text"><i class="bi bi-key"></i></span>
								<input asp-for="Email.CurrentPassword" class="form-control" type="password" />
							</div>
							<span asp-validation-for="Email.CurrentPassword" class="text-danger small"></span>
							<small class="text-muted">Required to confirm your identity</small>
						</div>
						<button type="submit" class="btn btn-primary">
							<i class="bi bi-check-circle me-2"></i>Update Email
						</button>
					</form>
				</div>
			</div>
		</div>

		<div class="tab-pane fade" id="password" role="tabpanel">
			<div class="card shadow-sm border-0">
				<div class="card-body p-4">
					<h5 class="card-title mb-4">
						<i class="bi bi-shield-lock text-primary me-2"></i>Change Password
					</h5>
					<form asp-action="ProfilePassword" method="post" class="edit-form">
						@Html.AntiForgeryToken()
						<div class="mb-3">
							<label asp-for="Password.CurrentPassword" class="form-label fw-bold"></label>
							<div class="input-group">
								<span class="input-group-text"><i class="bi bi-key"></i></span>
								<input asp-for="Password.CurrentPassword" class="form-control" type="password" />
							</div>
							<span asp-validation-for="Password.CurrentPassword" class="text-danger small"></span>
						</div>
						<div class="mb-3">
							<label asp-for="Password.NewPassword" class="form-label fw-bold"></label>
							<div class="input-group">
								<span class="input-group-text"><i class="bi bi-lock"></i></span>
								<input asp-for="Password.NewPassword" class="form-control" type="password" />
							</div>
							<span asp-validation-for="Password.NewPassword" class="text-danger small"></span>
						</div>
						<div class="mb-3">
							<label asp-for="Password.ConfirmPassword" class="form-label fw-bold"></label>
							<div class="input-group">
								<span class="input-group-text"><i class="bi bi-lock-fill"></i></span>
								<input asp-for="Password.ConfirmPassword" class="form-control" type="password" />
							</div>
							<span asp-validation-for="Password.ConfirmPassword" class="text-danger small"></span>
						</div>

						@if (ViewBag.PasswordRequirements != null && ((List<string>)ViewBag.PasswordRequirements).Any())
						{
							<div class="alert alert-info">
								<i class="bi bi-info-circle"></i>
								<strong>Password requirements:</strong>
								<ul class="mb-0 mt-2 small">
									@foreach (var requirement in (List<string>)ViewBag.PasswordRequirements)
									{
										<li>@requirement</li>
									}
								</ul>
							</div>
						}

						<button type="submit" class="btn btn-primary">
							<i class="bi bi-check-circle me-2"></i>Change Password
						</button>
					</form>
				</div>
			</div>
		</div>

		<div class="tab-pane fade" id="twofactor" role="tabpanel">
			<div class="card shadow-sm border-0">
				<div class="card-body p-4">
					<h5 class="card-title mb-4">
						<i class="bi bi-shield-check text-primary me-2"></i>Two-Factor Authentication
					</h5>
					@{
						var twoFactor = Model.TwoFactor;
						var is2faEnabled = twoFactor?.Is2faEnabled ?? false;
						var recoveryCodesLeft = twoFactor?.RecoveryCodesLeft as int?;
					}
					@if (is2faEnabled)
					{
						<div class="alert alert-success">
							<i class="bi bi-check-circle-fill"></i> <strong>Two-factor authentication is enabled.</strong>
						</div>
						<p>Your account is protected with two-factor authentication using an authenticator app.</p>

						@if (recoveryCodesLeft != null)
						{
							var codesLeft = recoveryCodesLeft.Value;
							if (codesLeft == 0)
							{
								<div class="alert alert-danger">
									<strong>Warning!</strong> You have no recovery codes left. Generate new recovery codes immediately to avoid being locked out.
								</div>
							}
							else if (codesLeft <= 3)
							{
								<div class="alert alert-warning">
									<strong>Warning!</strong> You have only <strong>@codesLeft</strong> recovery code(s) left. Consider generating new recovery codes.
								</div>
							}
							else
							{
								<div class="alert alert-info">
									You have <strong>@codesLeft</strong> recovery code(s) remaining.
								</div>
							}
						}

						<div class="mb-3">
							<button id="tfResetRecovery" class="btn btn-warning">
								<i class="bi bi-arrow-clockwise me-2"></i>Reset Recovery Codes
							</button>
							<button id="tfDisable" class="btn btn-danger ms-2">
								<i class="bi bi-x-circle me-2"></i>Disable 2FA
							</button>
						</div>
					}
					else
					{
						<p>Configure your authenticator app (TOTP) to enable two-factor authentication.</p>
						<div class="mb-2">
							<button id="tfConfigure" class="btn btn-primary">
								<i class="bi bi-shield-plus me-2"></i>Configure Authenticator
							</button>
						</div>
					}
					<div id="tfArea" class="tfa-setup-area" style="display:none; margin-top:12px;">
						<div id="tfQr" class="tfa-qr-container"></div>
						<div class="mt-2"><strong>Authentication key</strong></div>
						<pre id="tfKey" class="p-2 bg-light" style="max-width:320px; white-space:pre-wrap;"></pre>
						<div class="mt-2">
							<label for="tfCode">Verification code</label>
							<input id="tfCode" class="form-control" autocomplete="one-time-code" />
						</div>
						<div class="mt-2">
							<button id="tfEnable" class="btn btn-success">
								<i class="bi bi-check-circle me-2"></i>Enable
							</button>
						</div>
						<div id="tfFeedback" class="mt-2 text-danger" style="display:none;"></div>
					</div>
				</div>
			</div>
		</div>

		<div class="tab-pane fade" id="export" role="tabpanel">
			<div class="card shadow-sm border-0 mb-4">
				<div class="card-body p-4">
					<h5 class="card-title mb-4">
						<i class="bi bi-download text-primary me-2"></i>Download Your Data
					</h5>
					<p>You can download all data related to your account as a JSON file. This will include your profile, roles and related entities.</p>
					<form asp-action="ExportData" method="post">
						@Html.AntiForgeryToken()
						<button type="submit" class="btn btn-primary">
							<i class="bi bi-file-earmark-arrow-down me-2"></i>Download My Data
						</button>
					</form>
				</div>
			</div>

			<div class="card shadow-sm border-danger">
				<div class="card-body p-4">
					<h5 class="card-title mb-4 text-danger">
						<i class="bi bi-exclamation-triangle me-2"></i>Delete Account
					</h5>
					<p>Deleting your account will remove your user data. <strong>This action is irreversible.</strong></p>
					<form asp-action="DeleteAccount" method="post" class="delete-form">
						@Html.AntiForgeryToken()
						<div class="mb-3">
							<label asp-for="Delete.CurrentPassword" class="form-label fw-bold"></label>
							<div class="input-group">
								<span class="input-group-text"><i class="bi bi-key"></i></span>
								<input asp-for="Delete.CurrentPassword" class="form-control" type="password" />
							</div>
							<span asp-validation-for="Delete.CurrentPassword" class="text-danger small"></span>
							<small class="text-muted">Required to confirm your identity</small>
						</div>
						<button type="submit" class="btn btn-danger">
							<i class="bi bi-trash me-2"></i>Delete My Account
						</button>
					</form>
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	<partial name="_ValidationScriptsPartial" />
	<script src="~/lib/qrcodejs/qrcode.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	<script>
		(function(){
			var recoveryCodesModal;
			var currentRecoveryCodes = [];

			function getRequestVerificationToken() {
				var el = document.querySelector('#antiforgeryForm input[name="__RequestVerificationToken"]');
				return el ? el.value : '';
			}

			function renderQr(uri) {
				var container = document.getElementById('tfQr');
				container.innerHTML = '';
				new QRCode(container, { text: uri, width:200, height:200 });
			}

			function showToast(message, type) {
				var icon = type === 'success' ? 'success' : type === 'danger' ? 'error' : 'info';
				Swal.fire({
					toast: true,
					position: 'top-end',
					icon: icon,
					title: message,
					showConfirmButton: false,
					timer: 3000,
					timerProgressBar: true
				});
			}

			function showRecoveryCodesModal(codes) {
				currentRecoveryCodes = codes || [];
				var pre = document.getElementById('modalRecoveryCodes');
				pre.innerText = currentRecoveryCodes.join('\n');

				if (!recoveryCodesModal) {
					recoveryCodesModal = new bootstrap.Modal(document.getElementById('recoveryCodesModal'));
				}
				recoveryCodesModal.show();
			}

			function copyRecoveryCodesToClipboard() {
				var text = currentRecoveryCodes.join('\n');
				if (navigator.clipboard && navigator.clipboard.writeText) {
					navigator.clipboard.writeText(text).then(function(){
						showToast('Recovery codes copied to clipboard.', 'success');
					}).catch(function(err){
						showToast('Failed to copy: ' + err.message, 'danger');
					});
				} else {
					var textarea = document.createElement('textarea');
					textarea.value = text;
					textarea.style.position = 'fixed';
					textarea.style.opacity = '0';
					document.body.appendChild(textarea);
					textarea.select();
					try {
						document.execCommand('copy');
						showToast('Recovery codes copied to clipboard.', 'success');
					} catch(err) {
						showToast('Failed to copy.', 'danger');
					}
					document.body.removeChild(textarea);
				}
			}

			function downloadRecoveryCodes() {
				var text = currentRecoveryCodes.join('\n');
				var blob = new Blob([text], { type: 'text/plain' });
				var url = URL.createObjectURL(blob);
				var a = document.createElement('a');
				a.href = url;
				a.download = 'recovery-codes-' + new Date().toISOString().split('T')[0] + '.txt';
				document.body.appendChild(a);
				a.click();
				document.body.removeChild(a);
				URL.revokeObjectURL(url);
				showToast('Recovery codes downloaded.', 'success');
			}

			document.getElementById('btnCopyRecoveryCodes')?.addEventListener('click', copyRecoveryCodesToClipboard);
			document.getElementById('btnDownloadRecoveryCodes')?.addEventListener('click', downloadRecoveryCodes);

			var tfConfigureBtn = document.getElementById('tfConfigure');
			if(tfConfigureBtn) {
				tfConfigureBtn.addEventListener('click', function(e){
					e.preventDefault();
					fetch('/Account/Generate2faAjax', {
						method: 'POST',
						credentials: 'same-origin',
						headers: { 'RequestVerificationToken': getRequestVerificationToken() }
					}).then(function(r){ if(!r.ok) return r.text().then(t=>{throw new Error(t||('Status '+r.status));}); return r.json(); })
					.then(function(res){
						if(res.success) {
							document.getElementById('tfArea').style.display = 'block';
							renderQr(res.authenticatorUri);
							document.getElementById('tfKey').innerText = (res.sharedKey||'').replace(/(.{4})/g,'$1 ').trim();
							document.getElementById('tfFeedback').style.display = 'none';
						} else {
							document.getElementById('tfFeedback').innerText = res.message||'Failed to generate key.';
							document.getElementById('tfFeedback').style.display = 'block';
						}
					}).catch(function(err){ document.getElementById('tfFeedback').innerText = err.message||'Request failed.'; document.getElementById('tfFeedback').style.display = 'block'; });
				});
			}

			var tfEnableBtn = document.getElementById('tfEnable');
			if(tfEnableBtn) {
				tfEnableBtn.addEventListener('click', function(e){
					e.preventDefault();
					var code = document.getElementById('tfCode').value.trim();
					if(!code){ document.getElementById('tfFeedback').innerText='Enter verification code.'; document.getElementById('tfFeedback').style.display='block'; return; }
					fetch('/Account/EnableSecondFactorAjax', {
						method: 'POST',
						credentials: 'same-origin',
						headers: { 'Content-Type':'application/json', 'RequestVerificationToken': getRequestVerificationToken() },
						body: JSON.stringify({ VerificationCode: code })
					}).then(function(r){ if(!r.ok) return r.text().then(t=>{throw new Error(t||('Status '+r.status));}); return r.json(); })
					.then(function(res){
						if(res.success){
							if(res.recovery){
								showRecoveryCodesModal(res.recovery);
								showToast('Two-factor authentication enabled successfully!', 'success');
							}
							setTimeout(function(){ location.reload(); }, 3000);
						} else {
							document.getElementById('tfFeedback').innerText = res.message||'Failed to enable.';
							document.getElementById('tfFeedback').style.display = 'block';
						}
					}).catch(function(err){ document.getElementById('tfFeedback').innerText = err.message||'Request failed.'; document.getElementById('tfFeedback').style.display = 'block'; });
				});
			}

			var tfDisableBtn = document.getElementById('tfDisable');
			if(tfDisableBtn) {
				tfDisableBtn.addEventListener('click', function(e){
					e.preventDefault();
					Swal.fire({
						title: 'Disable Two-Factor Authentication?',
						text: 'You will need to reconfigure it to use authenticator apps again.',
						icon: 'warning',
						showCancelButton: true,
						confirmButtonColor: '#d33',
						cancelButtonColor: '#3085d6',
						confirmButtonText: 'Yes, disable it',
						cancelButtonText: 'Cancel'
					}).then(function(result) {
						if (result.isConfirmed) {
							var form = document.createElement('form');
							form.method='post';
							form.action='/Account/DisableTwoFactorSelf';
							var token = getRequestVerificationToken();
							if(token){
								var inp = document.createElement('input');
								inp.type='hidden';
								inp.name='__RequestVerificationToken';
								inp.value=token;
								form.appendChild(inp);
							}
							document.body.appendChild(form);
							form.submit();
						}
					});
				});
			}

			var tfResetRecoveryBtn = document.getElementById('tfResetRecovery');
			if(tfResetRecoveryBtn) {
				tfResetRecoveryBtn.addEventListener('click', function(e){
					e.preventDefault();
					Swal.fire({
						title: 'Reset Recovery Codes?',
						text: 'This will invalidate your existing recovery codes and generate new ones.',
						icon: 'warning',
						showCancelButton: true,
						confirmButtonColor: '#f0ad4e',
						cancelButtonColor: '#6c757d',
						confirmButtonText: 'Yes, reset them',
						cancelButtonText: 'Cancel'
					}).then(function(result) {
						if (result.isConfirmed) {
							fetch('/Account/ResetRecoveryCodesAjax', {
								method: 'POST',
								credentials: 'same-origin',
								headers: { 'RequestVerificationToken': getRequestVerificationToken() }
							}).then(function(r){ if(!r.ok) return r.text().then(t=>{throw new Error(t||('Status '+r.status));}); return r.json(); })
							.then(function(res){
								if(res.success && res.recovery){
									showRecoveryCodesModal(res.recovery);
									showToast('Recovery codes have been reset successfully!', 'success');
								} else {
									showToast(res.message || 'Failed to reset recovery codes.', 'danger');
								}
							}).catch(function(err){ showToast(err.message || 'Request failed.', 'danger'); });
						}
					});
				});
			}

			(function activateTab() {
				var active = '@TempData["ActiveTab"]' || window.location.hash.replace('#', '');
				if (active) {
					var triggerEl = document.querySelector('#' + active + '-tab');
					if (triggerEl) {
						var tab = new bootstrap.Tab(triggerEl);
						tab.show();
						var target = document.querySelector(triggerEl.getAttribute('data-bs-target'));
						if (target) {
							var input = target.querySelector('input');
							if (input) input.focus();
						}
					}
				}
			})();
		})();

		// Remove avatar function (placeholder)
		function removeAvatar() {
			Swal.fire({
				title: 'Remove Avatar?',
				text: 'This will remove your current profile picture.',
				icon: 'warning',
				showCancelButton: true,
				confirmButtonColor: '#d33',
				cancelButtonColor: '#6c757d',
				confirmButtonText: 'Yes, remove it',
				cancelButtonText: 'Cancel'
			}).then((result) => {
				if (result.isConfirmed) {
					// TODO: Implement avatar removal
					Swal.fire('Not Implemented', 'Avatar removal functionality will be added soon.', 'info');
				}
			});
		}
	</script>
}
