name: Database Tests

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      sqlserver:
  image: mcr.microsoft.com/mssql/server:2022-latest
        env:
       ACCEPT_EULA: Y
          SA_PASSWORD: ${{ secrets.SQL_SA_PASSWORD || 'YourStrong!Passw0rd' }}
    ports:
 - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P $SA_PASSWORD -C -Q 'SELECT 1' || exit 1"
          --health-interval=10s
      --health-timeout=5s
     --health-retries=5

    steps:
    - uses: actions/checkout@v4
  
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore
    
    - name: Wait for SQL Server
 run: |
        for i in {1..30}; do
 /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P '${{ secrets.SQL_SA_PASSWORD || 'YourStrong!Passw0rd' }}' -C -Q "SELECT 1" && break
   echo "Waiting for SQL Server..."
          sleep 2
 done
    
    - name: Create Test Database
   run: |
        /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P '${{ secrets.SQL_SA_PASSWORD || 'YourStrong!Passw0rd' }}' -C -Q "CREATE DATABASE [AirlineManager-Test];"
    
    - name: Setup Test Connection String
   run: |
        cat > AirlineManager.Tests/appsettings.Test.json << EOF
      {
          "ConnectionStrings": {
    "DefaultConnection": "Server=localhost;Database=AirlineManager-Test;User Id=sa;Password=${{ secrets.SQL_SA_PASSWORD || 'YourStrong!Passw0rd' }};TrustServerCertificate=True;MultipleActiveResultSets=true"
     },
    "Logging": {
        "LogLevel": {
    "Default": "Information",
     "Microsoft.EntityFrameworkCore": "Warning"
    }
          }
      }
        EOF
    
    - name: Apply Migrations
   run: |
   cd AirlineManager.DataAccess
   dotnet ef database update --startup-project ../AirlineManager/AirlineManager.csproj --connection "Server=localhost;Database=AirlineManager-Test;User Id=sa;Password=${{ secrets.SQL_SA_PASSWORD || 'YourStrong!Passw0rd' }};TrustServerCertificate=True;MultipleActiveResultSets=true"
      env:
        ASPNETCORE_ENVIRONMENT: Test
    
    - name: Run Tests
   run: dotnet test --no-build --verbosity normal --logger trx

    - name: Upload Test Results
   uses: actions/upload-artifact@v4
    if: always()
      with:
 name: test-results
        path: '**/*.trx'
